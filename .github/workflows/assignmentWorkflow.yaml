name: Issue Assignment Workflow

on:
  issue_comment:
    types: [created]

jobs:
  assign_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Assign Issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Get the list of authorized users from secrets
          const authorizedUsers = process.env.AUTHORIZED_USERS?.split(',').map(user => user.trim()) || [];
          
          const issueNumber = context.payload.issue.number;
          const commentBody = context.payload.comment.body;
          const commentAuthor = context.payload.comment.user.login;
          
          console.log(`Processing comment on issue #${issueNumber}`);
          console.log(`Comment author: ${commentAuthor}`);
          
          // Check if the comment author is authorized
          if (!authorizedUsers.includes(commentAuthor)) {
            console.log(`Unauthorized user ${commentAuthor} attempted to use assignment command`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `@${commentAuthor} You are not authorized to assign issues.`
            });
            return;
          }
          
          // Parse the assign command
          const assignRegex = /^\/assign\s+(@[\w-]+\s*)+$/m;
          const match = commentBody.match(assignRegex);
          
          if (match) {
            // Extract usernames (removing @ symbol)
            const assignees = [...commentBody.matchAll(/@([\w-]+)/g)]
              .map(match => match[1]);
            
            if (assignees.length > 0) {
              try {
                // First verify the current state of the issue
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                for (const assignee of assignees) {
                  try {
                    // Try to assign the user
                    await github.rest.issues.addAssignees({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      assignees: [assignee]
                    });
                    
                    // Verify the assignment was successful
                    const updatedIssue = await github.rest.issues.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber
                    });
                    
                    const isAssigned = updatedIssue.data.assignees.some(a => a.login.toLowerCase() === assignee.toLowerCase());
                    
                    if (isAssigned) {
                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber,
                        body: `✅ Successfully assigned to @${assignee}`
                      });
                    } else {
                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber,
                        body: `❌ Failed to assign @${assignee}. The user may not exist or may not have the proper permissions.`
                      });
                    }
                  } catch (error) {
                    console.error(`Error assigning ${assignee}:`, error);
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `❌ Failed to assign @${assignee}: ${error.message}`
                    });
                  }
                }
              } catch (error) {
                console.error('Error in assignment process:', error);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `❌ An error occurred while processing the assignment: ${error.message}`
                });
              }
            }
          } else {
            console.log('No valid /assign command found');
          }
      env:
        AUTHORIZED_USERS: ${{ secrets.AUTHORIZED_USERS }}
