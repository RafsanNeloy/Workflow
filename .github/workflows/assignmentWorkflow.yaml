name: Issue Assignment Workflow

on:
  issue_comment:
    types: [created]

jobs:
  assign_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Assign Issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          async function checkUserExists(username) {
            try {
              await github.rest.users.getByUsername({ username });
              return true;
            } catch (error) {
              console.log(`User existence check failed for ${username}:`, error);
              if (error.status === 404) {
                return false;
              }
              throw error;
            }
          }

          async function hasRepoAccess(username) {
            try {
              const response = await github.rest.repos.checkCollaborator({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: username
              });
              return response.status === 204;
            } catch (error) {
              console.log(`Repo access check failed for ${username}:`, error);
              return false;
            }
          }

          async function isAuthorizedUser(username) {
            // Get authorized users from secrets
            const authorizedUsers = process.env.AUTHORIZED_USERS?.split(',').map(u => u.trim().toLowerCase()) || [];
            return authorizedUsers.includes(username.toLowerCase());
          }

          const issueNumber = context.payload.issue.number;
          const commentBody = context.payload.comment.body;
          const commentAuthor = context.payload.comment.user.login;
          
          // First check if the comment author is authorized
          if (!await isAuthorizedUser(commentAuthor)) {
            console.log(`Unauthorized assignment attempt by ${commentAuthor}`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `❌ @${commentAuthor}: Only maintainers can assign issues`
            });
            return;
          }
          
          // Parse the assign command
          const assignRegex = /^\/assign\s+(@[\w-]+\s*)+$/m;
          const match = commentBody.match(assignRegex);
          
          if (match) {
            console.log('Assignment command detected:', commentBody);
            
            // Extract usernames (removing @ symbol)
            const assignees = [...commentBody.matchAll(/@([\w-]+)/g)]
              .map(match => match[1]);
            
            console.log('Parsed assignees:', assignees);
            
            if (assignees.length > 0) {
              for (const assignee of assignees) {
                try {
                  console.log(`Processing assignment for ${assignee}`);
                  
                  // Check if user exists
                  const userExists = await checkUserExists(assignee);
                  console.log(`User ${assignee} exists:`, userExists);
                  
                  if (!userExists) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `❌ Cannot assign to @${assignee}: User does not exist on GitHub`
                    });
                    continue;
                  }

                  // Check if user has repository access
                  const hasAccess = await hasRepoAccess(assignee);
                  console.log(`User ${assignee} has repo access:`, hasAccess);
                  
                  if (!hasAccess) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `❌ Cannot assign to @${assignee}: User needs to be a repository collaborator`
                    });
                    continue;
                  }

                  // Try to assign the user
                  console.log(`Attempting to assign ${assignee}`);
                  const assignResponse = await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    assignees: [assignee]
                  });
                  console.log('Assignment response:', assignResponse);

                  // Verify the assignment
                  const updatedIssue = await github.rest.issues.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber
                  });

                  const isAssigned = updatedIssue.data.assignees.some(
                    a => a.login.toLowerCase() === assignee.toLowerCase()
                  );
                  console.log(`Assignment verification for ${assignee}:`, isAssigned);

                  if (isAssigned) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `✅ Issue assigned to @${assignee}`
                    });
                  } else {
                    throw new Error(`Assignment verification failed for ${assignee}`);
                  }

                } catch (error) {
                  console.error(`Error processing assignment for ${assignee}:`, error);
                  let errorMessage = 'An unexpected error occurred';
                  
                  if (error.status === 403) {
                    errorMessage = 'Insufficient permissions to assign this user';
                  } else if (error.status === 404) {
                    errorMessage = 'User not found';
                  } else {
                    errorMessage = error.message || errorMessage;
                  }

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: `❌ Failed to assign @${assignee}: ${errorMessage}`
                  });
                }
              }
            }
          }
      env:
        AUTHORIZED_USERS: ${{ secrets.AUTHORIZED_USERS }}
