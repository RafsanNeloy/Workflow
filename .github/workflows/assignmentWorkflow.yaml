name: Issue Assignment Workflow

on:
  issue_comment:
    types: [created]

jobs:
  assign_issue:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Assign Issue
      uses: actions/github-script@v6
      with:
        script: |
          // Get the list of authorized users from secrets
          const authorizedUsers = process.env.AUTHORIZED_USERS.split(',').map(user => user.trim());
          
          const issueNumber = context.payload.issue.number;
          const commentBody = context.payload.comment.body;
          const commentAuthor = context.payload.comment.user.login;
          
          console.log(`Processing comment on issue #${issueNumber}`);
          console.log(`Comment author: ${commentAuthor}`);
          
          // Check if the comment author is authorized
          if (!authorizedUsers.includes(commentAuthor)) {
            console.log(`Unauthorized user ${commentAuthor} attempted to use assignment command`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `@${commentAuthor} You are not authorized to assign issues.`
            });
            return;
          }
          
          // Parse the assign command
          const assignRegex = /^\/assign\s+(@[\w-]+\s*)+$/m;
          const match = commentBody.match(assignRegex);
          
          if (match) {
            // Extract usernames (removing @ symbol)
            const assignees = [...commentBody.matchAll(/@([\w-]+)/g)]
              .map(match => match[1]);
            
            if (assignees.length > 0) {
              try {
                // Validate each user exists before attempting to assign
                const validUsers = [];
                const invalidUsers = [];
                
                for (const username of assignees) {
                  try {
                    // Check if user exists
                    await github.rest.users.getByUsername({
                      username: username
                    });
                    validUsers.push(username);
                  } catch (error) {
                    if (error.status === 404) {
                      invalidUsers.push(username);
                    } else {
                      throw error;
                    }
                  }
                }
                
                if (validUsers.length > 0) {
                  // Assign valid users
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    assignees: validUsers
                  });
                }
                
                // Construct response message
                let responseMessage = '';
                if (validUsers.length > 0) {
                  responseMessage += `✅ Issue assigned to: ${validUsers.map(user => '@' + user).join(', ')}\n`;
                }
                if (invalidUsers.length > 0) {
                  responseMessage += `❌ Invalid username(s): ${invalidUsers.map(user => '@' + user).join(', ')}`;
                }
                
                // Add response comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: responseMessage.trim()
                });
                
                console.log(`Assignment process completed. Valid users: ${validUsers.join(', ')}, Invalid users: ${invalidUsers.join(', ')}`);
              } catch (error) {
                console.error('Error in assignment process:', error);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `❌ An error occurred while processing the assignment: ${error.message}`
                });
              }
            }
          } else {
            console.log('No valid /assign command found');
          }
      env:
        AUTHORIZED_USERS: ${{ secrets.AUTHORIZED_USERS }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
